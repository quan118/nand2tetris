// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/String.jack

/**
 * Represents character strings. In addition for constructing and disposing
 * strings, the class features methods for getting and setting individual
 * characters of the string, for erasing the string's last character,
 * for appending a character to the string's end, and more typical
 * string-oriented operations.
 */
class String {
    field Array str;
    field int length;
    field int capacity;
    /** constructs a new empty string with a maximum length of maxLength
     *  and initial length of 0. */
    constructor String new(int maxLength) {
        if (~(maxLength > 0)) {
            return this;
        }
        let capacity = maxLength;
        let str = Array.new(maxLength);
        let length = 0;
        return this;
    }

    /** Disposes this string. */
    method void dispose() {
        if (capacity=0) {return;}
        let length = 0;
        do str.dispose();
        return;
    }

    /** Returns the current length of this string. */
    method int length() {
        return length;
    }

    /** Returns the character at the j-th location of this string. */
    method char charAt(int j) {
        return str[j];
    }

    /** Sets the character at the j-th location of this string to c. */
    method void setCharAt(int j, char c) {
        let str[j] = c;
        return;
    }

    /** Appends c to this string's end and returns this string. */
    method String appendChar(char c) {
        if (length < capacity) {
            let str[length] = c;
            let length = length + 1;
        }

        return this;
    }

    /** Erases the last character from this string. */
    method void eraseLastChar() {
        if (length > 0) {
            let length = length - 1;
        }
        return;
    }

    /** Returns the integer value of this string, 
     *  until a non-digit character is detected. */
    method int intValue() {
        var int number, i;
        var char c;
        var boolean minus;
        let minus = false;
        let number = 0;
        let i = 0;
        while (i < length) {
            let c = str[i];
            if ((i=0)&(c=45)) {
                let minus = true;
            } else {
                if (~((c < 48) | (c > 57))) {
                    let number = number * 10 + (c - 48);
                } else {
                    let i = length;
                }
            }
            let i = i + 1;
        }
        if (minus) {
            let number = -number;
        }
        return number;
    }

    /** Sets this string to hold a representation of the given value. */
    method void setInt(int val) {
        var int d, len;
        var Array digits;
        let digits = Array.new(10);
        let len = 0;
        let length = 0;
        if (val < 0) {
            do appendChar(45);
            let val = -val;
        }
        if (val = 0) {
            do appendChar(48);
        } else {
            while (val > 0) {
                let d = val - (val / 10 * 10);
                let digits[len] = d;
                let len = len + 1;
                let val = val / 10;
            }
            let d = len - 1;
            while (~(d < 0)) {
                do appendChar(digits[d] + 48);
                let d = d - 1;
            }
        }

        do digits.dispose();
        return;
    }

    /** Returns the new line character. */
    function char newLine() {
        return 128;
    }

    /** Returns the backspace character. */
    function char backSpace() {
        return 129;
    }

    /** Returns the double quote (") character. */
    function char doubleQuote() {
        return 34;
    }
}
